name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxcb1-dev libgtk-3-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gtk+3

      - name: Build nocb CLI
        working-directory: ./core
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build clipper GUI
        working-directory: ./clipper
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/nocb dist/nocb-${{ matrix.name }}
          cp target/${{ matrix.target }}/release/clipper dist/clipper-${{ matrix.name }}
          chmod +x dist/*
          cd dist
          sha512sum * > checksums-${{ matrix.name }}.sha512

      - name: Prepare binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item "target/${{ matrix.target }}/release/nocb.exe" "dist/nocb-${{ matrix.name }}.exe"
          Copy-Item "target/${{ matrix.target }}/release/clipper.exe" "dist/clipper-${{ matrix.name }}.exe"
          cd dist
          Get-ChildItem -Filter *.exe | ForEach-Object {
            (Get-FileHash $_.Name -Algorithm SHA512).Hash + "  " + $_.Name | Out-File -Append "checksums-${{ matrix.name }}.sha512" -NoNewline
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/*

  sign-and-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f -exec mv {} release/ \;

      - name: Import GPG Key
        run: echo "${{ secrets.HQ_ROTKO_GPG }}" | gpg --batch --import

      - name: Sign all files
        run: |
          cd release
          for file in *; do
            if [[ ! "$file" =~ \.sig$ ]]; then
              gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                --detach-sign --armor --default-key hq@rotko.net --output "${file}.sig" "$file"
            fi
          done

      - name: Create Release
        run: |
          cd release

          # Create release notes file
          cat > notes.md << 'EOF'
          ## Downloads

          ### CLI (nocb)
          - Linux x64: `nocb-linux-x64`
          - macOS x64: `nocb-macos-x64`
          - macOS ARM64: `nocb-macos-arm64`
          - Windows x64: `nocb-windows-x64.exe`

          ### GUI (clipper)
          - Linux x64: `clipper-linux-x64`
          - macOS x64: `clipper-macos-x64`
          - macOS ARM64: `clipper-macos-arm64`
          - Windows x64: `clipper-windows-x64.exe`

          ### Installation

          #### Linux/macOS
          ```bash
          # Download and install CLI
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/nocb-$(uname -s | tr '[:upper:]' '[:lower:]')-x64 -o nocb
          chmod +x nocb
          sudo mv nocb /usr/local/bin/

          # Download and install GUI (optional)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/clipper-$(uname -s | tr '[:upper:]' '[:lower:]')-x64 -o clipper
          chmod +x clipper
          sudo mv clipper /usr/local/bin/
          ```

          #### Windows
          Download the `.exe` files and add to your PATH.

          ### Verify signatures
          ```bash
          curl -L https://rotko.net/rotko.asc | gpg --import
          gpg --verify <file>.sig <file>
          ```
          EOF

          gh release create ${{ github.ref_name }} \
            --title "nocb ${{ github.ref_name }}" \
            --draft \
            --generate-notes \
            --notes-file notes.md \
            *
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
