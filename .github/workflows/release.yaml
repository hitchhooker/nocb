name: Build and Publish
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-cli:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: nocb-linux-x64
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug repository contents
        run: |
          echo "=== Current directory ==="
          pwd
          echo -e "\n=== Repository root contents ==="
          ls -la
          echo -e "\n=== Looking for Cargo.toml ==="
          find . -name "Cargo.toml" -type f 2>/dev/null || echo "No Cargo.toml found"
          echo -e "\n=== Git status ==="
          git status
          echo -e "\n=== Git log (last 5 commits) ==="
          git log --oneline -5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxcb1-dev

      - name: Build nocb binary
        run: cargo build --release

      - name: Prepare binary
        run: |
          cp target/release/nocb ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
          sha512sum ${{ matrix.name }} > ${{ matrix.name }}.sha512

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}
            ${{ matrix.name }}.sha512

  sign-and-release:
    needs: build-cli
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Import GPG Key
        run: echo "${{ secrets.HQ_ROTKO_GPG }}" | gpg --batch --import

      - name: Sign all binaries and hashes
        run: |
          for binary in nocb-*; do
            if [[ ! "$binary" =~ \.(sha512|sig)$ ]]; then
              gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                --detach-sign --armor --default-key hq@rotko.net --output "${binary}.sig" "$binary"

              if [[ -f "${binary}.sha512" ]]; then
                gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                  --detach-sign --armor --default-key hq@rotko.net --output "${binary}.sha512.sig" "${binary}.sha512"
              fi
            fi
          done

      - name: Create Release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "nocb ${{ github.ref_name }}" \
            --generate-notes \
            nocb-* *.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
